---
title: How to develop progressive web apps?
---

= How to develop progressive web apps?

The term [Progressive web apps](https://developers.google.com/web/progressive-web-apps/) was coined in
[june 2015](https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/) to
bridge the gap between web apps and native apps. In this article we will create a fully functioning progressive web app.

== What are progressive web apps?
Progressive web apps (PWA) are web applications that _progress over time_. If you happen to visit a website a lot, it
can be great to cache some of these assets offline or to install it on the homescreen.

It is build on the foundation of [progressive enhancement](https://alistapart.com/article/understandingprogressiveenhancement) and
[responsive web design](https://www.smashingmagazine.com/2011/01/guidelines-for-responsive-web-design). Like any modern
website, it should work for anybody anywhere and use more modern browser features when they are available.

Progressive web apps differ from hybrid apps as they are not installed via an app store. They are updated on the server,
which costs less to maintain since all users are on the same version. PWA's rely heaviliy on service workers to provide 
a native app-like experience.

== Our example: Renting bikes
In this article, we will build a progressive web app for my hometown's
[bike renting service Velo](https://www.velo-antwerpen.be/en). A lot of cities have such a renting service nowadays as
part of their public transport system. In our app, we want to show the availability of bikes per station (And also show the closest 
station, if I wanted to hop onto a bike right away). 

[image:MyBike](/img/0002_mybike.png)

I used Vue.js for this. This application is kept as simple as possible to focus on the PWA-specific parts. 
For a real world Vue.js application, you might want to check out Vue's [CLI tool](https://github.com/vuejs/vue-cli). 
The source code for this article can be found [here](http://www.github.com/code/mybike)

We first create an normal web application. We begin with an `index.html` file:

```html
<!DOCTYPE html>
<html>
    <head>
        <title>MyBike</title>
        <link rel="icon" type="image/png" href="img/favicon.png">
        <link rel="stylesheet" href="main.css" media="all" />
        <meta name="viewport" content="width=device-width, initial-scale=1">
    </head>
    <body>
        <div id="app">
            <div id="logo">
                <img src="img/logo.png" alt="MyBike" />
            </div>
            <ul class="stations">
                <li v-for="station in stations">
                    <div class="station">
                        <div class="status">
                            <img v-if="station.bikes == station.slots" src="img/status-full.png" alt="{{station.address}}" />
                            <img v-else-if="station.bikes > 0" src="img/status-available.png" alt="{{station.address}}" />
                            <img v-else-if="station.bikes == 0" src="img/status-empty.png" alt="{{station.address}}" />
                            <img v-else-if="station.status != OPN" src="img/status-closed.png" alt="{{station.address}}" />
                        </div>
                        <strong>{{station.address}} {{station.addressNumber}}</strong>
                        <div>Bikes: {{station.bikes}} - Slots {{station.slots}}</div>
                    </div>
                </li>
            </ul>
        </div>
        <script src="js/axios.min.js"></script>
        <script src="js/vue.min.js"></script>
        <script src="js/app.js"></script>
    </body>
</html>
```

The `app.js` file contains our Vue.js application. Here we load a static `stations.json` file. 

```javascript
var app = new Vue({
    el: '#app',
    data: {
        stations: []
    },
    beforeMount: function () {
        this.loadStations();
    },
    methods: {
        loadStations: function () {
            var self = this;
            axios.get('/stations.json')
                .then(function (response) {
                    self.stations = response.data;
                })
                .catch(function (error) {
                    console.log(error);
                });
        }
    }
});
```
In order to show it nicely on a mobile device, we add a `main.css` file: 

```css
body { color: #242729; font: 15px/1.3 Arial,"Helvetica Neue",Helvetica,sans-serif; margin: 40px 0; }
small { color: #999; }
#app { margin: 0 auto; max-width: 700px; }
#logo { margin-bottom: 40px; text-align: center; }
#logo img { width: 100px; height: auto; }
ul.stations { list-style: none; margin: 0 20px; padding: 0; position: relative; }
ul.stations li { border-bottom: 1px solid #e4e6e8; }
ul.stations li div.station { margin-bottom: 10px; margin-top: 10px; margin-left: 58px; }
ul.stations li div.station:after { content: ''; display: block; clear: both; }
ul.stations li div.station div.status { border-radius: 50%; float: left; margin-left: -58px; width: 48px; }
ul.stations li div.station div.status img { width: 48px; }
```

== Web app manifest
A web app manifest is a JSON file that follows the W3Câ€™s specification. It gives some extra information and notifies the browser 
that this application can be installed on the home screen. 

We create a `manifest.json` file:

```javascript
{
  "name": "MyBike",
  "short_name": "MyBike",
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#fff",
  "background_color": "#fff",
  "orientation": "portrait",
  "description": "An app for renting bikes",
  "icons": [{
    "src": "img/icon-120.png",
    "sizes": "120x120",
    "type": "image/png"
  }, {
    "src": "img/icon-144.png",
    "sizes": "144x144",
    "type": "image/png"
  }, {
    "src": "img/icon-152.png",
    "sizes": "152x152",
    "type": "image/png"
  }, {
    "src": "img/icon-192.png",
    "sizes": "192x192",
    "type": "image/png"
  },{
    "src": "img/icon-384.png",
    "sizes": "384x384",
    "type": "image/png"
  }]
}
```

And we add a link-tag in our index.html file: 

```html
<link rel="manifest" href="manifest.json">
```

How the user is notified that this app can be installed is browser-specific. 
Here is an example for [Opera](https://dev.opera.com/articles/installable-web-apps/).

== Service workers
[Service workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API) are a 
big part of PWAs. They allow you to develop [Offline First](http://offlinefirst.org/).
A service worker is a javascript process that runs separately and acts as a programmable proxy
between your application and the network. To avoid 
[man-in-the-middle attacks](https://en.wikipedia.org/wiki/Man-in-the-middle_attack), service workers 
have to run over https.

[image:ServiceWorker](/img/0002_sw.png)

In order to notify the browser that you have a service worker available, you have to register it on load. 
We do this in the our `app.js` file

```javascript
if ('serviceWorker' in navigator) {
    window.addEventListener('load', function() {
        navigator.serviceWorker.register('/sw.js').then(function() {
            console.log('ServiceWorker registration successful');
        }).catch(function(err) {
            console.log('ServiceWorker registration failed: ', err);
        });
    });
}
```
If you look at the code, you see that we register a seperate javascript file here. This is necassary as the service worker will run 
seperate from your other javascript code. The service worker also has no access to your DOM. `sw.js` should be created at the root-level, so 
not inside the js-folder. 

Let's create `sw.js`:

```javascript
var CACHE_NAME = 'my-bike-v1 ';
var CACHED_URLS = [
    '/',
    '/img/favicon.png',
    '/img/icon-120.png',
    '/img/icon-144.png',
    '/img/icon-152.png',
    '/img/icon-192.png',
    '/img/icon-384.png',
    '/img/logo.png',
    '/img/status-available.png',
    '/img/status-closed.png',
    '/img/status-empty.png',
    '/img/status-full.png',
    '/js/axios.min.js',
    '/js/vue.min.js',
    '/js/app.js',
    '/main.css'
];

self.addEventListener('install', function(event) {
    event.waitUntil(
        caches.open(CACHE_NAME).then(function(cache) {
            return cache.addAll(CACHED_URLS);
        })
    );

});
```

What happens here? A service worker has a specific [lifecycle](https://developers.google.com/web/fundamentals/instant-and-offline/service-worker/lifecycle)
When a service worker is found, the browser will try to install it. `CACHED_URLS` contains all url's that need to be cached. This idea 
follows the [app shell architecture](https://developers.google.com/web/fundamentals/architecture/app-shell), where you cache all static assets, to startup the 
application very quickly. In our case, these are all used files, without the station.json file, as this is the dynamic data here. 

If you try to cache a file that cannot be retrieved, the service worker won't be installed

[image:Service Worker failed to install](/img/0002_error_sw.png)

Once the ServiceWorker is installed, we can listen to the activate-event. 

```javascript
self.addEventListener('activate', function(event) {
    event.waitUntil(
        caches.keys().then(function(cacheNames) {
            cacheNames.map(function(cacheName) {
                if (CACHE_NAME !== cacheName && cacheName.startsWith('my-bike')) {
                    return caches.delete(cacheName);
                }
            })
        })
    );
});
```

There is a difference between a ServiceWorker being installed and the ServiceWorker becoming activated. 
In our code, we want to listen to activate-events, because when a new version of the ServiceWorker becomes active, we want 
to delete our old cache. This is also why `CACHE_NAME` has a version (v1) in it's name. A new version will become v2. 

The last part are fetch 'events'. When the service worker is installed, every request will trigger a fetch event. Inside this event, we can now
return our cached resource, if we have one available. 

Keep in mind that cached resource are only returned the second time
you visit the application, as the first time you were still installing it. Also keep in mind that when you develop,
especially on localhost, that the cache will kick it. Don't forget to clear the cache, or just to open a private window
so you don't get confused.

```javascript
self.addEventListener('fetch', function(event) {
    event.respondWith(
        caches.match(event.request).then(function(response) {
            if (response) {
                return response;
            }
            return fetch(event.request);
        })
    );
});
```

There are a lot of [examples](https://github.com/tjoskar/service-worker-exercises) available for service workers.
Keep in mind that service workers are a relatively new feature, so
[not all browsers support all features yet](https://jakearchibald.github.io/isserviceworkerready)

== Local Storage
PWA is mostly about ServiceWorkers, but the web has many features available that can enhance the user experience. 
Like [LocalStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage). We will now keep 
track of the lastUpdate-date. This date is only updated when we fetch the stations from our server. 

```javascript
var app = new Vue({
    el: '#app',
    data: {
        lastUpdated: null,
        stations: []
    },
    beforeMount: function () {
        this.loadStations();
        this.lastUpdated = localStorage.lastUpdated;
    },
    methods: {
        loadStations: function () {
            var self = this;
            axios.get('/stations.json')
                .then(function (response) {
                    self.stations = response.data;
                    self.lastUpdated = new Date().toLocaleString();
                    localStorage.lastUpdated =  self.lastUpdated;
                })
                .catch(function (error) {
                    console.log(error);
                });
        }
    }
});
```

This will be shown on the `index.html`-file below the logo: 

```
<div id="logo">
    <img src="img/logo.png" alt="MyBike" />
    <p><small>Last Updated: {{lastUpdated}}</small></p>
</div>
```

== Geolocation
We can now install our app and make sure that it loads fast and works offline. Next step is to find the closest station.
We can use the [Geolocation API](https://developers.google.com/maps/documentation/javascript/examples/map-geolocation) and 
get the current position. Once we retrieve it, we can resort the list based on the closest station. 

I used these [Stackoverflow Answer](http://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula) 
to calculate the number of kilometers between my coordinations and the ones described for the station.
The distance is set dynamically, so we need to use the [Vue-set method](https://vuejs.org/v2/guide/reactivity.html) and we round it to 1 decimal.

```
var app = new Vue({
    el: '#app',
    data: {
        position: null,
        lastUpdated: null,
        stations: []
    },
    beforeMount: function () {
        this.loadStations();
        this.lastUpdated = localStorage.lastUpdated;
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(this.locatePosition);
        }
    },
    methods: {
        getDistanceFromLatLonInKm: function (lat1, lon1, lat2, lon2) {
            var R = 6371;
            var dLat = this.deg2rad(lat2 - lat1);
            var dLon = this.deg2rad(lon2 - lon1);
            var a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(this.deg2rad(lat1)) * Math.cos(this.deg2rad(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
            var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            var d = R * c;
            return d;
        },
        deg2rad: function (deg) {
            return deg * (Math.PI / 180)
        },
        locatePosition: function (position) {
            console.log(position);
            this.position = position.coords;
            this.sort();
        },
        loadStations: function () {
            var self = this;
            axios.get('/stations.json')
                .then(function (response) {
                    self.stations = response.data;
                    self.lastUpdated = new Date().toLocaleString();
                    localStorage.lastUpdated =  self.lastUpdated;
                })
                .catch(function (error) {
                    console.log(error);
                });
        },
        sort: function() {
            for(var i in this.stations) {
                var distance = this.getDistanceFromLatLonInKm(this.stations[i].lat, this.stations[i].lon, this.position.latitude, this.position.longitude);
                Vue.set(this.stations[i], 'distance', Math.round(distance * 10) / 10);
            }
            this.stations.sort(function(a, b) {
                return a.distance - b.distance;
            });
        }
    }
});
```

== Push Notifications 

https://developers.google.com/web/fundamentals/getting-started/codelabs/push-notifications/

```javascript
const applicationServerKey = urlB64ToUint8Array(applicationServerPublicKey);
swRegistration.pushManager.subscribe({
  userVisibleOnly: true,
  applicationServerKey: applicationServerKey
})
```

```javascript
self.addEventListener('push', function(event) {
  event.waitUntil(self.registration.showNotification('Hello Optis', {}}));
});
```

== Conclusion












== Push Notifications
- http://info.localytics.com/blog/push-messaging-drives-88-more-app-launches-for-users-who-opt-in
- moet vanaf de server gesturd worden dus een manuele test hier
- http://caniuse.com/#search=push

== Testing
- https://github.com/GoogleChrome/lighthouse

== Will PWA replace native apps.
A lot of resources online compare progressive web apps as a direct competitor to native mobile applications.

Background Sync
- Framework Support (angular app-shell)
- IndexedDb 2.0
- HTTP/2 Optimizations
- Credential API
- WebPayment API

== Resources
- [Intro to Progressive Web Apps by Google](https://www.udacity.com/course/intro-to-progressive-web-apps--ud811)
- [Progressive Web App Summit 2016 ](https://www.youtube.com/playlist?list=PLNYkxOF6rcIAWWNR_Q6eLPhsyx6VvYjVb)
- [Web Fundamentals](https://developers.google.com/web/fundamentals)
- [The offline cookbook](https://jakearchibald.com/2014/offline-cookbook)